using System.Collections.Concurrent;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Rop.Generators.Shared;


namespace Rop.Winforms7.DerivedFromGenerator
{
    [Generator]
    public class DerivedFromGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {

            context.RegisterForSyntaxNotifications(() => new ClassesToAugmentReceiver());
        }
        public void Execute(GeneratorExecutionContext context)
        {
            var collector = context.SyntaxReceiver as ClassesToAugmentReceiver;
            if (collector == null || collector.ClassesToAugment.Count == 0) return;
            foreach (var classtoaugment in collector.ClassesToAugment)
            {
                generateCode(context, classtoaugment);
            }
            collector.Clear();
        }
        private void generateCode(GeneratorExecutionContext context, ProxyPartialClassToAugment proxyclasstoaugment)
        {
            var (classtoaugment, basetoflat) = (proxyclasstoaugment.Original, proxyclasstoaugment.BaseToFlat);
            var formname=classtoaugment.Identifier;

            var basename=basetoflat.ToString();
            var flatbasename = new string(basename.Select(c => char.IsLetterOrDigit(c) ? c : '_').ToArray());
            var newname = classtoaugment.Identifier + "_"+ flatbasename;
            var file = classtoaugment.FileName +"." +flatbasename+".g.cs";
            var sb = new StringBuilder();
            sb.AppendLine("// Autogenerated code for "+basename);
            sb.AppendLines(classtoaugment.GetHeader());
            sb.AppendLines(classtoaugment.GetClassNew(formname, newname, basename));
            sb.AppendLines(classtoaugment.GetFooter());
            var final = sb.ToString();
            context.AddSource(file, final);
        }
        
        class ClassesToAugmentReceiver : ISyntaxReceiver
        {
            public ConcurrentBag<ProxyPartialClassToAugment> ClassesToAugment { get; private set; } = new ConcurrentBag<ProxyPartialClassToAugment>();
            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                if (!(syntaxNode is ClassDeclarationSyntax cds)) return;
                // Business logic to decide what we're interested in goes here

                var basesof = cds.GenericBasesOfType("IDerivedFrom");
                if (basesof.Any())
                {
                    var ac = new PartialClassToAugment(cds);
                    foreach (var b in basesof)
                    {
                        var t=b.TypeArgumentList.Arguments[0];
                        ClassesToAugment.Add(new ProxyPartialClassToAugment(ac,t));
                    }
                }
            }
            public void Clear()
            {
                ClassesToAugment = new ConcurrentBag<ProxyPartialClassToAugment>();
            }
        }
    }

    
}
